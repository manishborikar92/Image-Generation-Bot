import os
import shutil
import requests
from flask import Flask
from dotenv import load_dotenv
from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# Load environment variables from .env file
load_dotenv()

# Hugging Face API details
HF_API_URLS = {
    "sd_xl": "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0",
    "flux": "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev"
}
HF_API_KEY = os.getenv("HF_API_KEY")

# Ensure the 'data/images' folder exists
IMAGE_FOLDER = "data/images"
os.makedirs(IMAGE_FOLDER, exist_ok=True)

# Function to generate an image using the selected model
def generate_image(prompt, model_key):
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    payload = {"inputs": prompt}
    response = requests.post(HF_API_URLS[model_key], json=payload, headers=headers)
    if response.status_code == 200:
        # Save image in the 'data/images' folder
        image_path = os.path.join(IMAGE_FOLDER, f"{model_key}_{prompt.replace(' ', '_')[:20]}.png")
        with open(image_path, "wb") as file:
            file.write(response.content)
        return image_path
    else:
        return None

# Start command
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("Welcome! Send me a text prompt to generate images.")

# Handle user prompts
async def handle_prompt(update: Update, context: CallbackContext):
    prompt = update.message.text

    await update.message.reply_text(f"Generating images for: '{prompt}'...")

    # Generate images for both models
    sd_xl_image_path = generate_image(prompt, "sd_xl")
    flux_image_path = generate_image(prompt, "flux")

    if sd_xl_image_path and flux_image_path:
        # Send images with captions
        media = [
            InputMediaPhoto(media=open(sd_xl_image_path, "rb"), caption="Generated by Stable Diffusion XL"),
            InputMediaPhoto(media=open(flux_image_path, "rb"), caption="Generated by FLUX.1-dev")
        ]
        await update.message.reply_media_group(media=media)

        # Clean up images after sending
        shutil.rmtree(IMAGE_FOLDER)
        os.makedirs(IMAGE_FOLDER, exist_ok=True)
    else:
        await update.message.reply_text("Sorry, I couldn't generate the images. Try again later.")

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running"

# Main function
def main():
    bot_token = os.getenv("BOT_TOKEN")

    # Initialize Application
    application = Application.builder().token(bot_token).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt))

    print("Bot is running...")

    # Run Flask app alongside the bot polling
    from threading import Thread
    def run_flask():
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))  # Port setup for Render

    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    
    # Start polling
    application.run_polling()

if __name__ == "__main__":
    main()
